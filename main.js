const { app, BrowserWindow, ipcMain, dialog } = require('electron');
const { SerialPort } = require('serialport');
const path = require('path');

let mainWindow;
let serialConnection = null;
let pumpState = false; // √âtat de la pompe
let isQuitting = false; // üö® Emp√™che la fermeture multiple

function createWindow() {
    mainWindow = new BrowserWindow({
        width: 1200,
        height: 700,
        webPreferences: {
            preload: path.join(__dirname, 'preload.js'),
            contextIsolation: true,
            nodeIntegration: false
        }
    });

    mainWindow.loadFile('index.html');

    mainWindow.on('close', async (event) => {
        if (!isQuitting) {
            event.preventDefault();
            isQuitting = true; // üîí Emp√™cher les fermetures multiples
            
            const choice = dialog.showMessageBoxSync(mainWindow, {
                type: 'warning',
                buttons: ['Non', 'Oui'],
                defaultId: 0,
                title: 'Confirmation',
                message: 'Voulez-vous vraiment quitter l‚Äôapplication ?',
                noLink: true
            });

            if (choice === 1) {
                await stopPumpAndQuit();
            } else {
                isQuitting = false; // üîì Autoriser une nouvelle fermeture
            }
        }
    });
}

// ‚úÖ Fonction pour afficher les logs dans l'interface
function logMessage(message) {
    console.log(`üìù LOG: ${message}`);
    if (mainWindow) {
        mainWindow.webContents.send('log-message', message);
    }
}

// üõë Arr√™ter la pompe avant de fermer l'application (une seule fois !)
async function stopPumpAndQuit() {
    logMessage("üî¥ Fermeture de l'application, arr√™t de la pompe...");

    if (serialConnection && serialConnection.isOpen && pumpState) {
        serialConnection.write("D", (err) => {
            if (err) logMessage(`‚ùå Erreur d'arr√™t de la pompe : ${err.message}`);
        });

        await new Promise(resolve => setTimeout(resolve, 500)); // ‚è≥ Attendre l'envoi
    }

    if (serialConnection && serialConnection.isOpen) {
        serialConnection.close();
    }

    app.quit();
}

// üîç R√©cup√©ration des ports s√©rie
ipcMain.handle('list-serial-ports', async () => {
    try {
        logMessage("üîç Recherche des ports s√©rie...");
        const ports = await SerialPort.list();
        logMessage(`‚úÖ Ports d√©tect√©s : ${JSON.stringify(ports)}`);
        return ports.map(port => ({
            path: port.path,
            manufacturer: port.manufacturer || "Inconnu",
            friendlyName: port.friendlyName || "Non sp√©cifi√©"
        }));
    } catch (error) {
        logMessage(`‚ùå Erreur lors de la r√©cup√©ration des ports : ${error.message}`);
        return [];
    }
});

// üü¢ Connexion √† un port s√©rie
ipcMain.handle('connect-serial-port', async (event, portName, baudRate) => {
    try {
        if (serialConnection && serialConnection.isOpen) {
            await disconnectSerialPort();
        }

        if (!portName) {
            return "‚ùå Aucun port s√©lectionn√©.";
        }

        serialConnection = new SerialPort({
            path: portName,
            baudRate: parseInt(baudRate),
            autoOpen: false
        });

        serialConnection.open((err) => {
            if (err) {
                logMessage(`‚ùå Erreur d'ouverture : ${err.message}`);
                return;
            }
            logMessage(`‚úÖ Connect√© √† ${portName} (${baudRate} bauds)`);
            setTimeout(() => serialConnection.write("\n"), 100);

            serialConnection.on('close', async () => {
                logMessage("üî¥ Port s√©rie d√©connect√©, arr√™t automatique de la pompe !");
                await disconnectSerialPort();
            });
        });

        return `‚úÖ Connect√© √† ${portName} (${baudRate} bauds)`;
    } catch (error) {
        return `‚ùå Erreur : ${error.message}`;
    }
});

// üõë D√©connexion manuelle du port s√©rie
ipcMain.handle('disconnect-serial-port', async () => {
    return await disconnectSerialPort();
});

// üõ† Fonction pour arr√™ter la pompe et fermer proprement le port s√©rie
async function disconnectSerialPort() {
    if (serialConnection && serialConnection.isOpen) {
        logMessage("üî¥ D√©connexion demand√©e, arr√™t de la pompe...");
        
        serialConnection.write("D", (err) => {
            if (err) logMessage(`‚ùå Erreur d'arr√™t de la pompe : ${err.message}`);
        });

        await new Promise(resolve => setTimeout(resolve, 500)); 

        serialConnection.close();
    }

    serialConnection = null;
    pumpState = false;
    mainWindow.webContents.send('pump-state', false);
    mainWindow.webContents.send('reset-pump-button');  
    mainWindow.webContents.send('port-disconnected');  

    return "‚úÖ Port s√©rie d√©connect√© proprement et pompe arr√™t√©e.";
}

// üõ† Envoi d'une commande s√©rie (Activation/D√©sactivation de la pompe)
ipcMain.handle('send-serial-command', async (event, command) => {
    if (!serialConnection || !serialConnection.isOpen) return "‚ùå Aucun port s√©rie connect√©.";

    try {
        serialConnection.write(command + '\n');
        logMessage(`üì§ Commande envoy√©e : ${command}`);

        if (command === 'D') {
            pumpState = false;
            mainWindow.webContents.send('pump-state', false);
        } else if (command === 'A') {
            pumpState = true;
        }
        return `‚úÖ Commande envoy√©e : ${command}`;
    } catch (error) {
        logMessage(`‚ùå Erreur d'envoi de commande : ${error.message}`);
        return `‚ùå Erreur : ${error.message}`;
    }
});

// ‚öôÔ∏è R√©glage des RPM
ipcMain.handle('set-rpm', async (event, rpm) => {
    if (!serialConnection || !serialConnection.isOpen) {
        return "‚ùå Aucun port s√©rie connect√©.";
    }

    try {
        const rpmFloat = parseFloat(rpm);
        if (isNaN(rpmFloat) || rpmFloat <= 0) {
            return "‚ùå Valeur de RPM invalide.";
        }

        if (!serialConnection.writable) {
            return "‚ùå Le port s√©rie n'est pas pr√™t.";
        }

        const buffer = Buffer.alloc(4);
        buffer.writeFloatLE(rpmFloat, 0);
        serialConnection.write(Buffer.from('R'));
        serialConnection.write(buffer, (err) => {
            if (err) {
                logMessage(`‚ùå Erreur d'envoi des RPM : ${err.message}`);
                return;
            }
            logMessage(`‚úÖ RPM d√©fini √† ${rpmFloat}`);
            mainWindow.webContents.send('rpm-updated', rpmFloat);
        });

        return `‚úÖ RPM d√©fini √† ${rpmFloat}`;
    } catch (error) {
        logMessage(`‚ùå Erreur lors du r√©glage des RPM : ${error.message}`);
        return `‚ùå Erreur : ${error.message}`;
    }
});


app.whenReady().then(createWindow);
app.on('before-quit', async () => {
    await stopPumpAndQuit();
});
