document.addEventListener('DOMContentLoaded', async () => {
    console.log("üöÄ Application charg√©e !");
    await updateSerialPortsList();
});

// üîÑ Met √† jour la liste des ports COM
async function updateSerialPortsList() {
    try {
        const ports = await window.api.listSerialPorts();
        console.log("üîç Ports d√©tect√©s :", ports);

        const portSelect = document.getElementById('ports');
        portSelect.innerHTML = ""; // Vide la liste d√©roulante

        if (ports.length > 0) {
            ports.forEach(port => {
                let option = document.createElement("option");
                option.value = port.path;
                option.textContent = `${port.path} - ${port.manufacturer || "Inconnu"}`;
                portSelect.appendChild(option);
            });
            document.getElementById('connect-btn').disabled = false; // ‚úÖ Active le bouton connexion
        } else {
            console.warn("‚ö† Aucun port COM d√©tect√©.");
            let option = document.createElement("option");
            option.textContent = "‚ö† Aucun port d√©tect√©";
            option.disabled = true;
            portSelect.appendChild(option);
            document.getElementById('connect-btn').disabled = true; // ‚ùå D√©sactive le bouton connexion
        }
    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des ports :", error);
    }
}

// üéõ Connexion/D√©connexion s√©rie
document.getElementById('connect-btn').addEventListener('click', async () => {
    const portSelect = document.getElementById('ports');
    const baudRateSelect = document.getElementById('baudrate');
    const connectBtn = document.getElementById('connect-btn');

    const portName = portSelect.value;
    const baudRate = baudRateSelect.value;

    if (!portName || portName.includes("Aucun port d√©tect√©")) {
        console.warn("‚ö† Aucun port s√©rie s√©lectionn√© !");
        return;
    }

    if (connectBtn.dataset.connected === "true") {
        console.log("üîå D√©connexion en cours...");
        await window.api.connectSerialPort("", ""); // D√©connecter
        connectBtn.textContent = "üü¢ Connecter";
        connectBtn.classList.remove("connected");
        connectBtn.classList.add("disconnected");
        connectBtn.dataset.connected = "false";

        // ‚ùå D√©sactiver les boutons apr√®s d√©connexion
        document.getElementById('toggle-pump-btn').disabled = true;
        document.getElementById('set-rpm-btn').disabled = true;
        document.getElementById('rpm-input').disabled = true;
    } else {
        console.log(`üîó Connexion √† ${portName} (${baudRate} bauds)...`);
        const result = await window.api.connectSerialPort(portName, baudRate);
        console.log(result);

        if (result.includes("‚úÖ")) {
            connectBtn.textContent = "üî¥ D√©connecter";
            connectBtn.classList.add("connected");
            connectBtn.classList.remove("disconnected");
            connectBtn.dataset.connected = "true";

            // ‚úÖ Activer les boutons apr√®s connexion
            document.getElementById('toggle-pump-btn').disabled = false;
            document.getElementById('set-rpm-btn').disabled = false;
            document.getElementById('rpm-input').disabled = false;  
        } else {
            console.error("‚ùå √âchec de connexion :", result);
        }
    }
});

// üöÄ Activation/D√©sactivation Pompe
document.getElementById('toggle-pump-btn').addEventListener('click', async () => {
    const btn = document.getElementById('toggle-pump-btn');
    const isPumpOn = btn.dataset.state === "on";

    const command = isPumpOn ? "D" : "A"; // "D" pour arr√™t, "A" pour activation
    console.log(`‚öôÔ∏è Envoi de la commande : ${command}`);

    const result = await window.api.sendSerialCommand(command);
    console.log(result);

    if (result.includes("‚úÖ")) {
        btn.textContent = isPumpOn ? "Activer la pompe" : "Arr√™ter la pompe";
        btn.classList.toggle("pump-on");
        btn.classList.toggle("pump-off");
        btn.dataset.state = isPumpOn ? "off" : "on";
    } else {
        console.error("‚ùå Erreur lors de l‚Äôenvoi de la commande :", result);
    }
});

// ‚öôÔ∏è R√©glage des RPM
document.getElementById('set-rpm-btn').addEventListener('click', async () => {
    const rpmInput = document.getElementById('rpm-input');
    const rpm = rpmInput.value;

    if (isNaN(rpm) || rpm <= 0) {
        console.warn("‚ö† Valeur de RPM invalide !");
        return;
    }

    console.log(`‚öôÔ∏è D√©finition des RPM √† : ${rpm}`);
    const result = await window.api.setRpm(rpm);
    console.log(result);
});
// üéØ Permet de d√©finir les RPM en appuyant sur "Entr√©e"
document.getElementById('rpm-input').addEventListener('keypress', async (event) => {
    if (event.key === "Enter") { // üìå V√©rifie si c'est bien la touche "Entr√©e"
        event.preventDefault();  // ‚ùå Emp√™che le comportement par d√©faut

        const rpmInput = document.getElementById('rpm-input');
        const rpm = rpmInput.value;

        if (isNaN(rpm) || rpm <= 0) {
            console.warn("‚ö† Valeur de RPM invalide !");
            return;
        }

        console.log(`‚öôÔ∏è D√©finition des RPM √† : ${rpm} (via Entr√©e)`);
        const result = await window.api.setRpm(rpm);
        console.log(result);
    }
});

// üìú Logs de la console s√©rie
function logToConsole(message) {
    const logContainer = document.getElementById('serial-output');
    const logEntry = document.createElement('p');
    logEntry.textContent = message;
    logContainer.appendChild(logEntry);
    logContainer.scrollTop = logContainer.scrollHeight;
}

// üéß √âcoute des donn√©es s√©rie
window.api.onSerialData((data) => {
    console.log("üì© Donn√©es re√ßues :", data);
    logToConsole(data);
});

// üîÑ R√©initialisation de l'interface apr√®s d√©connexion
window.api.onResetPumpButton(() => {
    console.log("üîÑ R√©initialisation de l'interface !");
    
    document.getElementById('toggle-pump-btn').textContent = "Activer la pompe";
    document.getElementById('toggle-pump-btn').classList.add("pump-off");
    document.getElementById('toggle-pump-btn').classList.remove("pump-on");
    document.getElementById('toggle-pump-btn').dataset.state = "off";
    document.getElementById('toggle-pump-btn').disabled = true;

    document.getElementById('connect-btn').textContent = "üü¢ Connecter";
    document.getElementById('connect-btn').classList.add("disconnected");
    document.getElementById('connect-btn').classList.remove("connected");
    document.getElementById('connect-btn').dataset.connected = "false";

    document.getElementById('set-rpm-btn').disabled = true;
    document.getElementById('rpm-input').disabled = true;
});
// üéß √âcoute la confirmation de mise √† jour des RPM depuis le main process
window.api.onRpmUpdated((rpm) => {
    console.log(`üîÑ RPM mis √† jour dans l'UI : ${rpm}`);
    const rpmInput = document.getElementById('rpm-input');
    rpmInput.value = rpm; // ‚úÖ Met √† jour le champ de saisie
});

// üîÑ R√©initialiser le bouton de la pompe si le port s√©rie est d√©connect√©
window.api.onResetPumpButton(() => {
    console.log("üîÑ R√©initialisation du bouton pompe apr√®s d√©connexion !");
    
    const pumpButton = document.getElementById('toggle-pump-btn');
    pumpButton.textContent = "Activer la pompe";
    pumpButton.classList.add("pump-off");
    pumpButton.classList.remove("pump-on");
    pumpButton.dataset.state = "off";
    pumpButton.disabled = true; // ‚úÖ D√©sactiver tant que le port s√©rie est coup√©
});

// üìú Afficher les logs re√ßus dans l'interface
window.api.onLogMessage((message) => {
    const logContainer = document.getElementById('log-container');
    if (logContainer) {
        const logEntry = document.createElement('p');
        logEntry.textContent = message;
        logContainer.appendChild(logEntry);
        logContainer.scrollTop = logContainer.scrollHeight;
    }
    console.log(`üîç LOG: ${message}`);
});

// üóë Effacer les logs
document.getElementById('clear-logs-btn').addEventListener('click', () => {
    const logContainer = document.getElementById('log-container');
    logContainer.innerHTML = ""; // Vide les logs affich√©s
    console.log("üóë Logs effac√©s !");
});

// üì• T√©l√©charger les logs
document.getElementById('download-logs-btn').addEventListener('click', () => {
    const logContainer = document.getElementById('log-container');
    const logs = Array.from(logContainer.children).map(log => log.textContent).join("\n");

    if (logs.length === 0) {
        console.warn("‚ö† Aucun log √† t√©l√©charger !");
        return;
    }

    const blob = new Blob([logs], { type: 'text/plain' });
    const a = document.createElement('a');
    a.href = URL.createObjectURL(blob);
    a.download = 'logs.txt';
    a.click();
    console.log("üì• Logs t√©l√©charg√©s !");
});
